// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.example.protocol.tree



@SerialVersionUID(0L)
final case class BinaryTree(
    value: com.example.protocol.tree.BinaryTree.Value = com.example.protocol.tree.BinaryTree.Value.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[BinaryTree] with com.trueaccord.lenses.Updatable[BinaryTree] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (value.leaf.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.leaf.get.serializedSize) + value.leaf.get.serializedSize }
      if (value.branch.isDefined) { __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(value.branch.get.serializedSize) + value.branch.get.serializedSize }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      value.leaf.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      value.branch.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.example.protocol.tree.BinaryTree = {
      var __value = this.value
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __value = com.example.protocol.tree.BinaryTree.Value.Leaf(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, value.leaf.getOrElse(com.example.protocol.tree.Leaf.defaultInstance)))
          case 18 =>
            __value = com.example.protocol.tree.BinaryTree.Value.Branch(_root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, value.branch.getOrElse(com.example.protocol.tree.Branch.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      com.example.protocol.tree.BinaryTree(
          value = __value
      )
    }
    def getLeaf: com.example.protocol.tree.Leaf = value.leaf.getOrElse(com.example.protocol.tree.Leaf.defaultInstance)
    def withLeaf(__v: com.example.protocol.tree.Leaf): BinaryTree = copy(value = com.example.protocol.tree.BinaryTree.Value.Leaf(__v))
    def getBranch: com.example.protocol.tree.Branch = value.branch.getOrElse(com.example.protocol.tree.Branch.defaultInstance)
    def withBranch(__v: com.example.protocol.tree.Branch): BinaryTree = copy(value = com.example.protocol.tree.BinaryTree.Value.Branch(__v))
    def clearValue: BinaryTree = copy(value = com.example.protocol.tree.BinaryTree.Value.Empty)
    def withValue(__v: com.example.protocol.tree.BinaryTree.Value): BinaryTree = copy(value = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => value.leaf.orNull
        case 2 => value.branch.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => value.leaf.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => value.branch.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.example.protocol.tree.BinaryTree
}

object BinaryTree extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.example.protocol.tree.BinaryTree] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.example.protocol.tree.BinaryTree] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.example.protocol.tree.BinaryTree = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.example.protocol.tree.BinaryTree(
      value = __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[com.example.protocol.tree.Leaf]].map(com.example.protocol.tree.BinaryTree.Value.Leaf(_)) orElse
__fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[com.example.protocol.tree.Branch]].map(com.example.protocol.tree.BinaryTree.Value.Branch(_)) getOrElse com.example.protocol.tree.BinaryTree.Value.Empty
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.example.protocol.tree.BinaryTree] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.example.protocol.tree.BinaryTree(
        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[com.example.protocol.tree.Leaf]]).map(com.example.protocol.tree.BinaryTree.Value.Leaf(_)) orElse
__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[com.example.protocol.tree.Branch]]).map(com.example.protocol.tree.BinaryTree.Value.Branch(_)) getOrElse com.example.protocol.tree.BinaryTree.Value.Empty
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TreeProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TreeProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => __out = com.example.protocol.tree.Leaf
      case 2 => __out = com.example.protocol.tree.Branch
    }
    __out
  }
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.example.protocol.tree.BinaryTree(
  )
  sealed trait Value extends _root_.com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def isLeaf: Boolean = false
    def isBranch: Boolean = false
    def leaf: scala.Option[com.example.protocol.tree.Leaf] = None
    def branch: scala.Option[com.example.protocol.tree.Branch] = None
  }
  object Value extends {
    @SerialVersionUID(0L)
    case object Empty extends com.example.protocol.tree.BinaryTree.Value {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
    }
  
    @SerialVersionUID(0L)
    case class Leaf(value: com.example.protocol.tree.Leaf) extends com.example.protocol.tree.BinaryTree.Value {
      override def isLeaf: Boolean = true
      override def leaf: scala.Option[com.example.protocol.tree.Leaf] = Some(value)
      override def number: Int = 1
    }
    @SerialVersionUID(0L)
    case class Branch(value: com.example.protocol.tree.Branch) extends com.example.protocol.tree.BinaryTree.Value {
      override def isBranch: Boolean = true
      override def branch: scala.Option[com.example.protocol.tree.Branch] = Some(value)
      override def number: Int = 2
    }
  }
  implicit class BinaryTreeLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.example.protocol.tree.BinaryTree]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.example.protocol.tree.BinaryTree](_l) {
    def leaf: _root_.com.trueaccord.lenses.Lens[UpperPB, com.example.protocol.tree.Leaf] = field(_.getLeaf)((c_, f_) => c_.copy(value = com.example.protocol.tree.BinaryTree.Value.Leaf(f_)))
    def branch: _root_.com.trueaccord.lenses.Lens[UpperPB, com.example.protocol.tree.Branch] = field(_.getBranch)((c_, f_) => c_.copy(value = com.example.protocol.tree.BinaryTree.Value.Branch(f_)))
    def value: _root_.com.trueaccord.lenses.Lens[UpperPB, com.example.protocol.tree.BinaryTree.Value] = field(_.value)((c_, f_) => c_.copy(value = f_))
  }
  final val LEAF_FIELD_NUMBER = 1
  final val BRANCH_FIELD_NUMBER = 2
}
